<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plTitle.Text" xml:space="preserve">
    <value>Заголовок</value>
  </data>
  <data name="plTitle.Help" xml:space="preserve">
    <value>Введите заголовок для объявления. </value>
  </data>
  <data name="plDescription.Text" xml:space="preserve">
    <value>Описание</value>
  </data>
  <data name="plDescription.Help" xml:space="preserve">
    <value>Укажите краткое описание объявления</value>
  </data>
  <data name="plURL.Text" xml:space="preserve">
    <value>Ссылка</value>
  </data>
  <data name="plURL.Help" xml:space="preserve">
    <value>Объяление может содержать необязательную ссылку на страницу или  файл на данном сайте или ссылку на любой интернет-адрес.</value>
  </data>
  <data name="Title.ErrorMessage" xml:space="preserve">
    <value>Укажите заголовок объявления</value>
  </data>
  <data name="Description.ErrorMessage" xml:space="preserve">
    <value>Вы должны указать краткое описание объявления</value>
  </data>
  <data name="plViewOrder.Text" xml:space="preserve">
    <value>Порядок показа</value>
  </data>
  <data name="plViewOrder.Help" xml:space="preserve">
    <value>Укажите порядок показа для явной сортировки объявлений в рамках одной даты. Объявления с большим значением порядка будут показаны выше.</value>
  </data>
  <data name="ViewOrder.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Порядок показа должен быть целым числом</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;Модуль АНОНСЫ&lt;/h1&gt;&lt;p&gt;Модуль выводит простой список текстовых анонсов, состоящих из заголовка и краткой аннотации.  Список опций включает ссылку "далее" на страницу или файл на данном сайте или на любой интернет-адрес, даты начала и окончания анонсирования. Трассировка и ведение журнала кликов также возможны. Анонсы отсортированы от самых новых к более старым, за исключением случаев явной сортировки при помощи поля "порядок показа".&lt;/p&gt;&lt;h1&gt;Добавление нового анонса&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;Добавьте новый модуль &lt;b&gt;Анонсы&lt;/b&gt;, или перейдите к существующему модулю.
&lt;li&gt;Нажмите кнопку &lt;b&gt;Добавить анонс&lt;/b&gt;. 
&lt;li&gt; Укажите &lt;b&gt;Заголовок&lt;/b&gt; анонса.&lt;li&gt;&lt;b&gt;Дата в заголовке&lt;/b&gt; - необязательный параметр, управляющий показом даты в заголовке анонса.&lt;li&gt;Укажите &lt;b&gt;Описание&lt;/b&gt; - текст, кратко описывающий суть анонса.&lt;li&gt;Выберите &lt;b&gt;Тип ссылки&lt;/b&gt; (необязательный), из возможного списка &lt;b&gt;URL&lt;/b&gt;, &lt;b&gt;Страница&lt;/b&gt; или &lt;b&gt;Файл&lt;/b&gt; и затем в поле &lt;b&gt;Ссылка&lt;/b&gt; выберите из списка или явно укажите интернет-адрес, страницу или файл.
&lt;li&gt;Необязательное свойство &lt;b&gt;Учитывать число кликов&lt;/b&gt; управляет учетом нажатий на ссылку, если она есть.&lt;li&gt;Отметьте необязательный параметр &lt;b&gt;Учитывать пользователей, дату и время кликов&lt;/b&gt;, если желаете вести такой учет.&lt;li&gt;Укажите дату &lt;b&gt;Окончания&lt;/b&gt; анонсирования (необязательно). Можете использовать календарь для выбора даты&lt;li&gt;Используйте необязательное поле &lt;b&gt;Порядок показа&lt;/b&gt; для явного указания порядка сортировки анонсов.
&lt;li&gt;Нажмите кнопку &lt;b&gt;Сохранить&lt;/b&gt;.&lt;/ol&gt;</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Свойства объявления</value>
  </data>
  <data name="plPublishDate.Help" xml:space="preserve">
    <value>Введите дату публикации объявления. По умолчанию, объявление будет отображаться только начиная с этой даты.</value>
  </data>
  <data name="plPublishDate.Text" xml:space="preserve">
    <value>Дата публикации</value>
  </data>
  <data name="PublishDate.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Вы ввели недопустимую дату!</value>
  </data>
  <data name="PublishDateRequired.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Вы должны ввести дату</value>
  </data>
  <data name="ExpireDate.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Вы ввели неправильную дату!</value>
  </data>
  <data name="plExpireDate.Help" xml:space="preserve">
    <value>Введите дату окончания публикации объявления. </value>
  </data>
  <data name="plExpireDate.Text" xml:space="preserve">
    <value>Дата окончания публикации</value>
  </data>
  <data name="plImage.Help" xml:space="preserve">
    <value>Выбор изображения для объявления.</value>
  </data>
  <data name="plImage.Text" xml:space="preserve">
    <value>Изображение</value>
  </data>
  <data name="chkAllowExport.Text" xml:space="preserve">
    <value>Разрешить экпорт</value>
  </data>
  <data name="lblAllowExport.Help" xml:space="preserve">
    <value>Отметьте галочку, если хотите чтобы созданная новость отображалась в модулях-импортерах более высокого уровня (если они настроены для этого) и дополнительных модулях</value>
  </data>
  <data name="lblAllowExport.Text" xml:space="preserve">
    <value>Настройки экспорта</value>
  </data>
  <data name="lblItemExport.Help" xml:space="preserve">
    <value>Укажите, в каких еще модулях кроме текущего и модулей-импортеров необходимо разместить данную новость</value>
  </data>
  <data name="lblItemExport.Text" xml:space="preserve">
    <value>Разместить в модулях</value>
  </data>
  <data name="ExportSection.Text" xml:space="preserve">
    <value>Настройки экспорта</value>
  </data>
  <data name="strSelectTargetModule.Text" xml:space="preserve">
    <value>-- выберите новостной модуль-получатель --</value>
  </data>
</root>